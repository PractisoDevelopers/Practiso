import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE textFrame(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    content TEXT NOT NULL
);

CREATE TABLE imageFrame(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    filename TEXT NOT NULL,
    width INTEGER NOT NULL,
    height INTEGER NOT NULL,
    altText TEXT
);

CREATE TABLE optionsFrame(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT
);

CREATE TABLE frameByQuiz(
    quizId INTEGER NOT NULL,
    priority INTEGER NOT NULL,
    textFrameId INTEGER,
    imageFrameId INTEGER,
    optionsFrameId INTEGER,
    PRIMARY KEY (quizId, textFrameId, imageFrameId, optionsFrameId),
    FOREIGN KEY (textFrameId) REFERENCES textFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (imageFrameId) REFERENCES imageFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (optionsFrameId) REFERENCES optionsFrame(id) ON DELETE CASCADE,
    CONSTRAINT integerity_chk CHECK (textFrameId IS NOT NULL OR imageFrameId IS NOT NULL OR optionsFrameId IS NOT NULL)
);

CREATE TABLE frameByOptionsFrame(
    id INTEGER PRIMARY KEY,
    optionsFrameId INTEGER NOT NULL,
    priority INTEGER NOT NULL,
    textFrameId INTEGER,
    imageFrameId INTEGER,
    isKey INTEGER AS Boolean NOT NULL,
    FOREIGN KEY (optionsFrameId) REFERENCES optionsFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (textFrameId) REFERENCES textFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (imageFrameId) REFERENCES imageFrame(id) ON DELETE CASCADE,
    CONSTRAINT integerity_chk CHECK (textFrameId IS NOT NULL OR imageFrameId IS NOT NULL)
);

CREATE TABLE quiz(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    creationTimeISO TEXT AS Instant NOT NULL,
    modificationTimeISO TEXT AS Instant
);

CREATE TABLE frameEmbeddingIndex(
    textFrameId INTEGER,
    imageFrameId INTEGER,
    indexKey INTEGER NOT NULL,
    PRIMARY KEY (textFrameId, imageFrameId, indexKey),
    CONSTRAINT integerity_chk CHECK (textFrameId IS NOT NULL OR imageFrameId IS NOT NULL)
);

getAllQuiz:
SELECT *
FROM quiz;

getQuizById:
SELECT *
FROM quiz
WHERE id = ?;

getQuizByIds:
SELECT *
FROM quiz
WHERE id IN ?;

getRecentQuiz:
SELECT Q1.*
FROM quiz Q1
WHERE (SELECT strftime('%s', creationTimeISO) AS time
      FROM quiz
      ORDER BY time DESC
      LIMIT 1) - strftime('%s', Q1.creationTimeISO) < 60;

getQuizByDimensions:
SELECT Q.*
FROM quiz Q JOIN quizByDimension D ON D.quizId = Q.id
WHERE D.dimensionId IN ?;

getQuizByOptionsFrameId:
SELECT Q.*
FROM quiz Q JOIN frameByQuiz F ON Q.id = F.quizId
WHERE F.optionsFrameId = ?;


getQuizByImageFrameId:
SELECT Q.*
FROM quiz Q JOIN frameByQuiz F ON Q.id = F.quizId LEFT JOIN frameByOptionsFrame FO ON FO.optionsFrameId = F.optionsFrameId
WHERE F.imageFrameId = :id OR FO.imageFrameId = :id;


getQuizByTextFrameId:
SELECT Q.*
FROM quiz Q JOIN frameByQuiz F ON Q.id = F.quizId LEFT JOIN frameByOptionsFrame FO ON FO.optionsFrameId = F.optionsFrameId
WHERE F.textFrameId = :id OR FO.textFrameId = :id;

getFrameByQuiz:
SELECT *
FROM frameByQuiz;

getStrandedQuiz:
SELECT Q.*
FROM quiz Q
WHERE Q.id NOT IN (SELECT quizId FROM quizByDimension);

getQuizCountByDimension:
SELECT coalesce(count(*), 0)
FROM quizByDimension
WHERE dimensionId = ?
GROUP BY dimensionId;

insertQuiz:
INSERT INTO quiz(name, creationTimeISO, modificationTimeISO)
VALUES (?, ?, ?);

updateQuizName:
UPDATE quiz SET name = ?
WHERE id = ?;

updateQuizModificationTime:
UPDATE quiz SET modificationTimeISO = ?
WHERE id = ?;

removeQuizzesWithFrames {
DELETE FROM imageFrame WHERE id IN (SELECT imageFrameId FROM frameByQuiz WHERE quizId IN :id);
DELETE FROM textFrame WHERE id IN (SELECT textFrameId FROM frameByQuiz WHERE quizId IN :id);
DELETE FROM textFrame WHERE id IN (SELECT textFrameId FROM frameByOptionsFrame WHERE optionsFrameId IN (SELECT optionsFrameId FROM frameByQuiz WHERE quizId IN :id));
DELETE FROM imageFrame WHERE id IN (SELECT imageFrameId FROM frameByOptionsFrame WHERE optionsFrameId IN (SELECT optionsFrameId FROM frameByQuiz WHERE quizId IN :id));
DELETE FROM optionsFrame WHERE id IN (SELECT optionsFrameId FROM frameByQuiz WHERE quizId IN :id);
DELETE FROM quiz WHERE id IN :id;
}

getAllTextFrames:
SELECT *
FROM textFrame;

getTextFramesByQuizId:
SELECT T.*, priority
FROM textFrame T JOIN frameByQuiz Q ON T.id = Q.textFrameId
WHERE Q.quizId = ?;

getTextFrameById:
SELECT * FROM textFrame WHERE id = ?;

getTextFrameByOptionsFrameId:
SELECT T.*, F.id AS linkId, isKey, priority
FROM textFrame T JOIN frameByOptionsFrame F ON F.textFrameId = T.id
WHERE F.optionsFrameId = ?;

insertTextFrame:
INSERT INTO textFrame(content)
VALUES ( ?);

associateLastTextFrameWithQuiz:
INSERT INTO frameByQuiz(textFrameId, quizId, priority)
VALUES (last_insert_rowid(), ?, ?);

assoicateLastTextFrameWithOption:
INSERT INTO frameByOptionsFrame(textFrameId, optionsFrameId, isKey, priority)
VALUES (last_insert_rowid(), ?, ?, ?);

associateTextFrameWithOption:
INSERT INTO frameByOptionsFrame(textFrameId, optionsFrameId, isKey, priority)
VALUES (?, ?, ?, ?);

dissociateTextFrameFromQuiz:
DELETE FROM frameByQuiz WHERE quizId = ? AND textFrameId = ?;

dissociateTextFrameFromOption:
DELETE FROM frameByOptionsFrame WHERE optionsFrameId = ? AND textFrameId = ?;

updateTextFrameContent:
UPDATE textFrame SET content = ? WHERE id = ?;

removeTextFrame:
DELETE FROM textFrame WHERE id = ?;


getAllImageFrames:
SELECT *
FROM imageFrame;

getImageFrameById:
SELECT * FROM imageFrame WHERE id = ?;

getImageFramesByQuizId:
SELECT I.*, priority
FROM imageFrame I JOIN frameByQuiz Q ON Q.imageFrameId = I.id
WHERE Q.quizId = ?;

getImageFramesByOptionsFrameId:
SELECT I.*, O.id AS linkId, isKey, priority
FROM imageFrame I JOIN frameByOptionsFrame O ON O.imageFrameId = I.id
WHERE O.optionsFrameId = ?;

insertImageFrame:
INSERT INTO imageFrame(filename, altText, width, height)
VALUES (?, ?, ?, ?);

associateLastImageFrameWithQuiz:
INSERT INTO frameByQuiz(quizId, imageFrameId, priority)
VALUES (?, last_insert_rowid(), ?);

assoicateLastImageFrameWithOption:
INSERT INTO frameByOptionsFrame(optionsFrameId, imageFrameId, priority, isKey)
VALUES (?, last_insert_rowid(), ?, ?);

assoicateImageFrameWithOption:
INSERT INTO frameByOptionsFrame(optionsFrameId, imageFrameId, priority, isKey)
VALUES (?, ?, ?, ?);

dissociateImageFrameFromQuiz:
DELETE FROM frameByQuiz WHERE quizId = ? AND imageFrameId = ?;

dissociateImageFrameFromOption:
DELETE FROM frameByOptionsFrame WHERE optionsFrameId = ? AND imageFrameId = ?;

updateImageFrameContent:
UPDATE imageFrame SET filename = ?, width = ?, height = ? WHERE id = ?;

updateImageFrameAltText:
UPDATE imageFrame SET altText = ? WHERE id = ?;

removeImageFrame:
DELETE FROM imageFrame WHERE id = ?;


getAllOptionsFrames:
SELECT *
FROM optionsFrame;

insertOptionsFrame:
INSERT INTO optionsFrame(name)
VALUES (?);

getOptionsFrameByQuizId:
SELECT O.*, priority FROM optionsFrame O JOIN frameByQuiz F ON F.optionsFrameId = O.id
WHERE F.quizId = ?;

associateLastOptionsFrameWithQuiz:
INSERT INTO frameByQuiz(quizId, optionsFrameId, priority)
VALUES (?, last_insert_rowid(), ?);

associateOptionsFrameWithQuiz:
INSERT INTO frameByQuiz(quizId, optionsFrameId, priority)
VALUES (?, ?, ?);

updateOptionsFrameName:
UPDATE optionsFrame SET name = ? WHERE id = ?;

removeOptionsFrame:
DELETE FROM optionsFrame WHERE id = ?;

lastInsertRowId:
SELECT last_insert_rowid();


updateIsKey:
UPDATE frameByOptionsFrame SET isKey = ? WHERE id = ?;


getFrameEmbeddingIndexByKey:
SELECT * FROM frameEmbeddingIndex WHERE indexKey = ?;

getFrameEmbeddingIndexKey:
SELECT indexKey FROM frameEmbeddingIndex WHERE textFrameId = ? AND imageFrameId = ?;

insertFrameEmbeddingIndex:
INSERT INTO frameEmbeddingIndex VALUES (?, ?, ?);

getTextFrameEmbeddingIndex:
SELECT indexKey FROM frameEmbeddingIndex WHERE textFrameId = ?;

insertTextFrameEmbeddingIndex:
INSERT INTO frameEmbeddingIndex(textFrameId, indexKey) VALUES (?, ?);

getImageFrameEmbeddingIndex:
SELECT indexKey FROM frameEmbeddingIndex WHERE imageFrameId = ?;

insertImageFrameEmbeddingIndex:
INSERT INTO frameEmbeddingIndex(imageFrameId, indexKey) VALUES (?, ?);

removeFrameEmbeddingIndexByKey:
DELETE FROM frameEmbeddingIndex WHERE indexKey = ?;

removeFrameEmeddbingIndexByFrameIds:
DELETE FROM frameEmbeddingIndex WHERE textFrameId IN ? OR imageFrameId IN ?;