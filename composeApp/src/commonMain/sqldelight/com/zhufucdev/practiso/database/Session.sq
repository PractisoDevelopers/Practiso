import kotlinx.datetime.Instant;

CREATE TABLE session(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    creationTimeISO TEXT AS Instant NOT NULL,
    lastAccessTimeISO TEXT AS Instant
);

CREATE TABLE take(
    id INTEGER PRIMARY KEY,
    sessionId INTEGER NOT NULL,
    creationTimeISO TEXT AS Instant NOT NULL,
    lastAccessTimeISO TEXT AS Instant,
    durationSeconds INTEGER NOT NULL DEFAULT 0,
    hidden INTEGER NOT NULL DEFAULT 0,
    UNIQUE (id, sessionId)
);

CREATE TABLE timerByTake(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    takeId INTEGER NOT NULL,
    durationSeconds REAL NOT NULL,
    FOREIGN KEY (takeId) REFERENCES take(id) ON DELETE CASCADE
);

CREATE TABLE optionsFrameAnswer(
    takeId INTEGER NOT NULL,
    optionsFrameId INTEGER NOT NULL,
    PRIMARY KEY (takeId, optionsFrameId)
);

CREATE TABLE quizBySession(
    sessionId INTEGER NOT NULL,
    quizId INTEGER NOT NULL,
    PRIMARY KEY (sessionId, quizId),
    FOREIGN KEY (sessionId) REFERENCES session(id) ON DELETE CASCADE,
    FOREIGN KEY (quizId) REFERENCES quiz(id) ON DELETE CASCADE
);

CREATE TABLE answer(
    takeId INTEGER NOT NULL,
    quizId INTEGER NOT NULL,
    optionsFrameId INTEGER,
    textFrameId INTEGER,
    answerOptionId INTEGER,
    answerText TEXT,
    priority INTEGER NOT NULL,
    PRIMARY KEY (takeId, quizId, optionsFrameId, textFrameId),
    FOREIGN KEY (answerOptionId) REFERENCES frameByOptionsFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (takeId) REFERENCES take(id) ON DELETE CASCADE,
    FOREIGN KEY (quizId) REFERENCES quiz(id) ON DELETE CASCADE,
    FOREIGN KEY (optionsFrameId) REFERENCES optionsFrame(id) ON DELETE CASCADE,
    CONSTRAINT ans_chk CHECK (answerOptionId IS NOT NULL OR answerText IS NOT NULL),
    CONSTRAINT options_frame_chk CHECK (optionsFrameId IS NOT NULL AND answerOptionId IS NOT NULL OR optionsFrameId IS NULL),
    CONSTRAINT text_frame_chk CHECK (textFrameId IS NOT NULL AND textFrameId IS NOT NULL OR textFrameId IS NULL)
);

CREATE VIEW takeStat AS
SELECT T.id, QT.sessionId, S.name, T.hidden, T.durationSeconds, T.creationTimeISO, T.lastAccessTimeISO, COALESCE(Q.countQuizDone, 0) AS countQuizDone, QT.countQuizTotal
FROM take T
JOIN session S ON T.sessionId = S.id
LEFT JOIN (
    SELECT count(quizId) AS countQuizDone, takeId
    FROM (SELECT DISTINCT quizId, takeId FROM answer)
    GROUP BY takeId
) Q ON Q.takeId = T.id
JOIN (
    SELECT count(*) AS countQuizTotal, sessionId
    FROM quizBySession
    GROUP BY sessionId
) QT ON QT.sessionId = S.id;

getAllSessions:
SELECT *
FROM session;

getSessionByTakeId:
SELECT S.*
FROM session S JOIN take T ON T.sessionId = S.id
WHERE T.id = ?;

insertSession:
INSERT INTO session(name, creationTimeISO)
VALUES (?, ?);

assoicateQuizWithSession:
INSERT INTO quizBySession(quizId, sessionId)
VALUES (?, ?);

updateSessionAccessTime:
UPDATE session SET lastAccessTimeISO = ? WHERE id = ?;

removeSession:
DELETE FROM session WHERE id == ?;

insertTake:
INSERT INTO take(sessionId, creationTimeISO)
VALUES (?, ?);

getTakeById:
SELECT *
FROM take WHERE id = ?;

associateTimerWithTake:
INSERT INTO timerByTake(takeId, durationSeconds)
VALUES (?, ?);

disassociateTimerFromTake:
DELETE FROM timerByTake WHERE id = ?;

updateTakeDuration:
UPDATE take SET durationSeconds = ? WHERE id = ?;

updateTakeAccessTime:
UPDATE take SET lastAccessTimeISO = ? WHERE id = ?;

updateTakeVisibility:
UPDATE take SET hidden = ? WHERE id = ?;

getQuizzesByTakeId:
SELECT Q.*
FROM take T JOIN quizBySession S ON S.sessionId = T.sessionId JOIN quiz Q ON Q.id = S.quizId
WHERE T.id = ?;

getAllTakeStats:
SELECT *
FROM takeStat;

getRecentTakeStats:
SELECT *
FROM takeStat
ORDER BY COALESCE(takeStat.lastAccessTimeISO, takeStat.creationTimeISO) DESC
LIMIT ?;

getTakeStatsBySessionId:
SELECT *
FROM takeStat
WHERE sessionId = ?
ORDER BY id;

getQuizCountBySession:
SELECT count(*)
FROM quizBySession WHERE sessionId = ?;

setTextAnswer:
INSERT OR REPLACE INTO answer(quizId, takeId, textFrameId, answerText, priority)
VALUES (?, ?, ?, ?, ?);

setOptionAnswer:
INSERT OR REPLACE INTO answer(quizId, takeId, optionsFrameId, answerOptionId, priority)
VALUES (?, ?, ?, ?, ?);

getAnswersByTakeId:
SELECT *
FROM answer WHERE takeId = ?
ORDER BY priority;

removeTextAnswer:
DELETE FROM answer WHERE textFrameId = ? AND quizId = ? AND takeId = ?;

removeOptionAnswer:
DELETE FROM answer WHERE answerOptionId = ? AND optionsFrameId = ? AND quizId = ? AND takeId = ?;
