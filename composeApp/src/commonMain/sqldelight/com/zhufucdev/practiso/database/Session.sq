import kotlinx.datetime.Instant;

CREATE TABLE session(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    creationTimeISO TEXT AS Instant NOT NULL,
    lastAccessTimeISO TEXT AS Instant
);

CREATE TABLE take(
    id INTEGER PRIMARY KEY,
    sessionId INTEGER NOT NULL,
    creationTimeISO TEXT AS Instant NOT NULL,
    lastAccessTimeISO TEXT AS Instant,
    durationSeconds INTEGER NOT NULL DEFAULT 0,
    hidden INTEGER NOT NULL DEFAULT 0,
    UNIQUE (id, sessionId)
);

CREATE TABLE timerByTake(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    takeId INTEGER NOT NULL,
    durationSeconds REAL NOT NULL,
    FOREIGN KEY (takeId) REFERENCES take(id) ON DELETE CASCADE
);

CREATE TABLE optionsFrameAnswer(
    takeId INTEGER NOT NULL,
    optionsFrameId INTEGER NOT NULL,
    PRIMARY KEY (takeId, optionsFrameId)
);

CREATE TABLE quizBySession(
    sessionId INTEGER NOT NULL,
    quizId INTEGER NOT NULL,
    PRIMARY KEY (sessionId, quizId),
    FOREIGN KEY (sessionId) REFERENCES session(id) ON DELETE CASCADE,
    FOREIGN KEY (quizId) REFERENCES quiz(id) ON DELETE CASCADE
);

CREATE TABLE quizByTake(
    takeId INTEGER NOT NULL,
    quizId INTEGER NOT NULL,
    PRIMARY KEY (takeId, quizId),
    FOREIGN KEY (takeId) REFERENCES take(id) ON DELETE CASCADE,
    FOREIGN KEY (quizId) REFERENCES quiz(id) ON DELETE CASCADE
);

CREATE VIEW takeStat AS
SELECT T.id, QT.sessionId, S.name, T.hidden, T.durationSeconds, T.creationTimeISO, T.lastAccessTimeISO, COALESCE(Q.countQuizDone, 0) AS countQuizDone, QT.countQuizTotal
FROM session S
JOIN take T ON T.sessionId = S.id
LEFT JOIN (
    SELECT count(*) AS countQuizDone, takeId
    FROM quizByTake
    GROUP BY takeId
) Q ON Q.takeId = T.id
JOIN (
    SELECT count(*) AS countQuizTotal, sessionId
    FROM quizBySession
    GROUP BY sessionId
) QT ON QT.sessionId = S.id;

getAllSessions:
SELECT *
FROM session;

insertSession:
INSERT INTO session(name, creationTimeISO)
VALUES (?, ?);

assoicateQuizWithSession:
INSERT INTO quizBySession(quizId, sessionId)
VALUES (?, ?);

updateSessionAccessTime:
UPDATE session SET lastAccessTimeISO = ? WHERE id = ?;

removeSession:
DELETE FROM session WHERE id == ?;

insertTake:
INSERT INTO take(sessionId, creationTimeISO)
VALUES (?, ?);

associateTimerWithTake:
INSERT INTO timerByTake(takeId, durationSeconds)
VALUES (?, ?);

disassociateTimerFromTake:
DELETE FROM timerByTake WHERE id = ?;

updateTakeDuration:
UPDATE take SET durationSeconds = ? WHERE id = ?;

updateTakeAccessTime:
UPDATE take SET lastAccessTimeISO = ? WHERE id = ?;

updateTakeVisibility:
UPDATE take SET hidden = ? WHERE id = ?;

getAllTakeStats:
SELECT *
FROM takeStat;

getRecentTakeStats:
SELECT *
FROM takeStat
ORDER BY COALESCE(takeStat.lastAccessTimeISO, takeStat.creationTimeISO) ASC
LIMIT ?;

getTakeStatsBySession:
SELECT *
FROM takeStat
WHERE sessionId = ?
ORDER BY id;

getQuizCountBySession:
SELECT count(*)
FROM quizBySession WHERE sessionId = ?;