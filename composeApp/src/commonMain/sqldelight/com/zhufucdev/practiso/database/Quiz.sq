import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE textFrame(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    content TEXT NOT NULL
);

CREATE TABLE imageFrame(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    filename TEXT NOT NULL,
    width INTEGER NOT NULL,
    height INTEGER NOT NULL,
    altText TEXT
);

CREATE TABLE optionsFrame(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT
);

CREATE TABLE frameByQuiz(
    quizId INTEGER NOT NULL,
    priority INTEGER NOT NULL,
    textFrameId INTEGER,
    imageFrameId INTEGER,
    optionsFrameId INTEGER,
    PRIMARY KEY (quizId, textFrameId, imageFrameId, optionsFrameId),
    FOREIGN KEY (textFrameId) REFERENCES textFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (imageFrameId) REFERENCES imageFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (optionsFrameId) REFERENCES optionsFrame(id) ON DELETE CASCADE,
    CONSTRAINT integerity_chk CHECK (textFrameId IS NOT NULL OR imageFrameId IS NOT NULL OR optionsFrameId IS NOT NULL)
);

CREATE TABLE frameByOptionsFrame(
    optionsFrameId INTEGER NOT NULL,
    priority INTEGER NOT NULL,
    textFrameId INTEGER,
    imageFrameId INTEGER,
    isKey INTEGER AS Boolean NOT NULL,
    PRIMARY KEY (optionsFrameId, textFrameId, imageFrameId),
    FOREIGN KEY (optionsFrameId) REFERENCES optionsFrame(id),
    FOREIGN KEY (textFrameId) REFERENCES textFrame(id) ON DELETE CASCADE,
    FOREIGN KEY (imageFrameId) REFERENCES imageFrame(id) ON DELETE CASCADE,
    CONSTRAINT integerity_chk CHECK (textFrameId IS NOT NULL OR imageFrameId IS NOT NULL)
);

CREATE TABLE quiz(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    creationTimeISO TEXT AS Instant NOT NULL,
    modificationTimeISO TEXT AS Instant
);

getAllQuiz:
SELECT *
FROM quiz;

getRecentQuiz:
SELECT *
FROM quiz
ORDER BY creationTimeISO
LIMIT ?;

getQuizByDimension:
SELECT Q.*
FROM quiz Q JOIN quizByDimension D ON D.quizId = Q.id
WHERE D.dimensionId = ?;

getQuizCountByDimension:
SELECT count(*)
FROM quizByDimension
WHERE dimensionId = ?
GROUP BY dimensionId;

insertQuiz:
INSERT INTO quiz(name, creationTimeISO, modificationTimeISO)
VALUES (?, ?, ?);

updateQuizName:
UPDATE quiz SET name = ?
WHERE id = ?;

updateQuizModificationTimeISO:
UPDATE quiz SET modificationTimeISO = ?
WHERE id = ?;

removeQuiz:
DELETE FROM quiz WHERE id = ?;


getTextFramesByQuizId:
SELECT T.*, priority
FROM textFrame T JOIN frameByQuiz Q ON T.id = Q.textFrameId
WHERE Q.quizId = ?;

getTextFrameByOptionsFrameId:
SELECT T.*, isKey, priority
FROM textFrame T JOIN frameByOptionsFrame F ON F.textFrameId = T.id
WHERE F.optionsFrameId = ?;

insertTextFrame:
INSERT INTO textFrame(content)
VALUES ( ?);

associateLastTextFrameWithQuiz:
INSERT INTO frameByQuiz(textFrameId, quizId, priority)
VALUES (last_insert_rowid(), ?, ?);

assoicateLastTextFrameWithOption:
INSERT INTO frameByOptionsFrame(textFrameId, optionsFrameId, isKey, priority)
VALUES (last_insert_rowid(), ?, ?, ?);

dissociateTextFrameFromQuiz:
DELETE FROM frameByQuiz WHERE quizId = ? AND textFrameId = ?;

dissociateTextFrameFromOption:
DELETE FROM frameByOptionsFrame WHERE optionsFrameId = ? AND textFrameId = ?;

updateTextFrameContent:
UPDATE textFrame SET content = ? WHERE id = ?;

removeTextFrame:
DELETE FROM textFrame WHERE id = ?;


getImageFramesByQuizId:
SELECT I.*, priority
FROM imageFrame I JOIN frameByQuiz Q ON Q.imageFrameId = I.id
WHERE Q.quizId = ?;

getImageFramesByOptionsFrameId:
SELECT I.*, isKey, priority
FROM imageFrame I JOIN frameByOptionsFrame O ON O.imageFrameId = I.id
WHERE O.optionsFrameId = ?;

insertImageFrame:
INSERT INTO imageFrame(filename, altText, width, height)
VALUES (?, ?, ?, ?);

associateLastImageFrameWithQuiz:
INSERT INTO frameByQuiz(quizId, imageFrameId, priority)
VALUES (?, last_insert_rowid(), ?);

assoicateLastImageFrameWithOption:
INSERT INTO frameByOptionsFrame(optionsFrameId, imageFrameId, priority, isKey)
VALUES (?, last_insert_rowid(), ?, ?);

dissociateImageFrameFromQuiz:
DELETE FROM frameByQuiz WHERE quizId = ? AND imageFrameId = ?;

dissociateImageFrameFromOption:
DELETE FROM frameByOptionsFrame WHERE optionsFrameId = ? AND imageFrameId = ?;

updateImageFrameContent:
UPDATE imageFrame SET filename = ?, width = ?, height = ? WHERE id = ?;

updateImagrFrameAltText:
UPDATE imageFrame SET altText = ? WHERE id = ?;

removeImageFrame:
DELETE FROM imageFrame WHERE id = ?;


insertOptionsFrame:
INSERT INTO optionsFrame(name)
VALUES (?);

getOptionsFrameByQuizId:
SELECT O.*, priority FROM optionsFrame O JOIN frameByQuiz F ON F.optionsFrameId = O.id
WHERE F.quizId = ?;

associateLastOptionsFrameWithQuiz:
INSERT INTO frameByQuiz(quizId, optionsFrameId, priority)
VALUES (?, last_insert_rowid(), ?);

associateOptionsFrameWithQuiz:
INSERT INTO frameByQuiz(quizId, optionsFrameId, priority)
VALUES (?, ?, ?);

updateOptionsFrameName:
UPDATE optionsFrame SET name = ? WHERE id = ?;

removeOptionsFrame:
DELETE FROM optionsFrame WHERE id = ?;

lastInsertRowId:
SELECT last_insert_rowid();